apply plugin: 'com.android.library'
apply plugin: 'maven-publish'


def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties")))


def getVersionName = { ->
    return "2.5"
}

// Add the name of your library here
def getArtifactId = { ->
    return "persistcookiesokhttp3"
}

// Add the group ID of your library here
def getGroupId = { ->
    return "com.github.rodlibs"
}

// Prepare URL of maven package.
// Replace 'mohitrajput987' with your github repo's username or organization name.
// Replace 'analytics-sdk-android' with the name of github repo
def getGitHubUrl = { ->
    return "https://maven.pkg.github.com/rodLibs/PersistCookieOkHttp3"
}


publishing {
    publications {
        bar(MavenPublication) {
            groupId getGroupId()
            artifactId getArtifactId()
            version getVersionName()
            artifact("$buildDir/outputs/aar/app-release.aar")

            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode
                                .appendNode('exclusions')
                                .appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    }
                    else if (!dep.properties.excludeRules.empty) {
                        final exclusionNode = dependencyNode
                                .appendNode('exclusions')
                                .appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                } // end addDependency
                configurations.compile.getDependencies().each { dep ->
                    addDependency(dep, "compile")
                }
                configurations.api.getDependencies().each { dep ->
                    addDependency(dep, "compile")
                }
                configurations.implementation.getDependencies().each {dep ->
                    addDependency(dep, "runtime")
                }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri(getGitHubUrl())
            credentials {
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
                println "GitHubPackages build.gradle\n\tusername=$username\n\ttoken=$password"
            }
        }
    }
}


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 29
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}



dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.squareup.okhttp3:okhttp:4.8.0'
}


//./gradlew clean build publish